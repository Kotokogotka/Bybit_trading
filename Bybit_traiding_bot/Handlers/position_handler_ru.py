from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.types import Message, CallbackQuery
from aiogram.filters.state import StatesGroup, State, StateFilter

from Function.calculate_position import calculate_position_size
from Keyboards.currency_pair import type_position


calc_router_ru: Router = Router()

user_dict = {}


class InputClientInfo(StatesGroup):
    type_position = State()  # –í—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–∏
    entry_price = State()  # –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é. –≠—Ç–æ —Ü–µ–Ω–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ç—Ä–µ–π–¥–µ—Ä –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –≤–æ–π—Ç–∏ –≤ –ø–æ–∑–∏—Ü–∏—é.
    stop_loss_price = State()  # –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ —É–±—ã—Ç–∫–µ
    deposit = State()  # –†–∞–∑–º–µ—Ä–∞ –¥–µ–ø–æ–∑–∏—Ç–∞
    risk_percentage = State()  # –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∏—Å–∫–∞


@calc_router_ru.callback_query(StateFilter(default_state), F.data == 'futures')
async def process_input_currency(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        text='–í—ã–±–µ—Ä–µ—Ç–µ –ø–æ–∑–∏—Ü–∏—é –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç–µ –≤—Ö–æ–¥–∏—Ç—å', reply_markup=type_position()
    )
    await state.set_state(InputClientInfo.type_position)


@calc_router_ru.callback_query(StateFilter(InputClientInfo.type_position),
                               F.data.in_(['short', 'long']))
async def process_typy_position(callback: CallbackQuery, state: FSMContext):
    await state.update_data(type_position=callback.data)
    await callback.message.delete()
    await callback.message.answer(
        text='üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é üíπ\n\n'
    )
    await state.set_state(InputClientInfo.entry_price)


@calc_router_ru.message(StateFilter(InputClientInfo.entry_price), lambda message: message.text.replace('.', '', 1).isdigit())
async def process_entry_price(message: Message, state: FSMContext):

    if '.' in message.text:
        entry_price = float(message.text)
    else:
        entry_price = int(message.text)

    await state.update_data(entry_price=entry_price)
    await message.answer(
        text=f'üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ –≤—ã —É–∫–∞–∑–∞–ª–∏ {entry_price}\n\n'
    )
    await message.answer(
        text='üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ üíπ\n\n'
             '‚ùì –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ (—Å—Ç–æ–ø-–ª–æ—Å—Å) –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–∞—à –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫, '
             '–µ—Å–ª–∏ —Å–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –Ω–µ—É–¥–∞—á–Ω–æ. –ü—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ü–µ–Ω—ã –≤—ã—Ö–æ–¥–∞ —É—á—Ç–∏—Ç–µ —É—Ä–æ–≤–Ω–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è/–ø–æ–¥–¥–µ—Ä–∂–∫–∏, '
             '–∞ —Ç–∞–∫–∂–µ —Å–≤–æ—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏.'
    )
    await state.set_state(InputClientInfo.stop_loss_price)


@calc_router_ru.message(StateFilter(InputClientInfo.entry_price))
async def process_bad_entry(message: Message):
    await message.answer(
        text='‚ùå –í–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –∏–ª–∏ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π(–¥—Ä–æ–±–Ω—ã–º)\n\n'
             '–ü—Ä–∏–º–µ—Ä:‚úÖ 1000, 2.3\n'
             '–ü—Ä–∏–º–µ—Ä: ‚ùå —Å—Ç–æ, 66,66\n\n'
             'üö´ –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ /cancel'
    )


@calc_router_ru.message(StateFilter(InputClientInfo.stop_loss_price), lambda message: message.text.replace('.', '', 1).isdigit())
async def process_good_stop_loss(message: Message, state: FSMContext):
    if '.' in message.text:
        stop_loss = float(message.text)
    else:
        stop_loss = int(message.text)

    await state.update_data(stop_loss_price=stop_loss)
    await message.answer(
        text=f'üí∞ –¶–µ–Ω—É –≤—ã—Ö–æ–¥–∞ –≤—ã —É–∫–∞–∑–∞–ª–∏ {message.text}\n\n'
    )
    await message.answer(
        text='üí∞ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ –≤–∏–¥–µ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞ üí∞\n\n'
             '‚ùì –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –≤–∞—à—É —Ç–æ—Ä–≥–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏ —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞. '
             '–≠—Ç–æ –≤–∞–∂–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å–ª–µ–¥—É–µ—Ç —Ç—â–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π –æ —Ç–æ—Ä–≥–æ–≤–ª–µ. '
             '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à —Ä–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–∏–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.'
    )
    await state.set_state(InputClientInfo.deposit)


@calc_router_ru.message(StateFilter(InputClientInfo.stop_loss_price))
async def process_bad_stop_loss(message: Message):
    await message.answer(
        text='‚ùå –í–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –∏–ª–∏ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π(–¥—Ä–æ–±–Ω—ã–º)\n\n'
             '–ü—Ä–∏–º–µ—Ä:‚úÖ 1000, 2.3\n'
             '–ü—Ä–∏–º–µ—Ä: ‚ùå —Å—Ç–æ, 66,66\n\n'
             'üö´ –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ /cancel'
    )


@calc_router_ru.message(StateFilter(InputClientInfo.deposit), lambda x: int(x.text))
async def process_good_deposit(message: Message, state: FSMContext):
    await state.update_data(deposit=int(message.text))
    await message.answer(
        text=f'üí∞ –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: {message.text} üí∞'
    )
    await message.answer(
        text='üìà –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ % —Ä–∏—Å–∫–∞ –æ—Ç 1 –¥–æ 100 üìà\n\n'
             '‚ùì –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∏—Å–∫–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –æ—Ç –≤–∞—à–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ –≤—ã –≥–æ—Ç–æ–≤—ã –ø–æ—Ç–µ—Ä—è—Ç—å –≤ –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–µ. '
             '–≠—Ç–æ –∫–ª—é—á–µ–≤–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–∞ –ø–æ—Ç–µ—Ä—è–º–∏. '
             '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–µ–º—É —É—Ä–æ–≤–Ω—é –∫–æ–º—Ñ–æ—Ä—Ç–∞ –∏ –≤–∞—à–µ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.'
    )
    await state.set_state(InputClientInfo.risk_percentage)


@calc_router_ru.message(StateFilter(InputClientInfo.deposit))
async def process_bad_deposit(message: Message):
    await message.answer(
        text='‚ùå –í–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º\n\n'
             'üö´ –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ /cancel'
    )


@calc_router_ru.message(StateFilter(InputClientInfo.risk_percentage), lambda x: int(x.text) and 1 <= int(x.text) <= 100)
async def process_good_risk(message: Message, state: FSMContext):
    await state.update_data(risk_percentage=int(message.text))
    await message.answer(
        text=f'üìà –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∏—Å–∫–∞: {message.text} % üìà'
    )

    await message.answer(
        text='üéâ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã!'
    )
    user_dict = await state.get_data()
    await message.answer(f'–¢–∏–ø –ø–æ–∑–∏—Ü–∏–∏: {user_dict["type_position"]}\n'
                         f'üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {user_dict["entry_price"]}\n'
                         f'üí∞ –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: {user_dict["stop_loss_price"]}\n'
                         f'üí∞ –î–µ–ø–æ–∑–∏—Ç: {user_dict["deposit"]}\n'
                         f'üìà –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∏—Å–∫–∞: {user_dict["risk_percentage"]} %\n'
                         )
    position_volume = calculate_position_size(position_type=user_dict["type_position"],
                                              D=user_dict["deposit"],
                                              PE=user_dict["entry_price"],
                                              PL=user_dict["stop_loss_price"],
                                              R=user_dict["risk_percentage"])
    await message.answer(
        text=f"–û–±—ä–µ–º –ø–æ–∑–∏—Ü–∏–∏: {position_volume}\n\n"
             f"–î–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /cancel")
